import Cocoa

/*
 a b c
   d
 e f g
 
 -> a + b + c + d + e + f + g = sum
 => sum
 
 1 2 3
 4 5 6
 7 8 9
 
 -> 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35
 => 35
 
 
 1 2 3 -1 -2 -3
 4 5 6 -4 -5 -6
 7 8 9 -7 -8 -9
 
 -> 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35
 -> 2 + 3 + (-1) + 6 + 8 + 9 + (-7) = 20
 -> 3 + (-1) + (-2) + (-4) + 9 + (-7) + (-8) = -10
 -> (-1) + (-2) + (-3) + (-5) + (-7) + (-8) + (-9) = -35
 => 35 20 -10 -35 => MAX : 35
 */

/*
 0 1 2 3 4 5
 1
 2
 3
 4
 5
 -> (0,0) + (0,1) + (0,2) + (1,1) + (2,0) + (2,1) + (2,2)
 -> (0,1) + (0,2) + (0,3) + (1,2) + (2,1) + (2,2) + (2,3)
 -> (0,2) + (0,3) + (0,4) + (1,3) + (2,2) + (2,3) + (2,4)
 -> (0,3) + (0,4) + (0,5) + (1,4) + (2,3) + (2,4) + (2,5)
 */

// arr : 6*6 배열
// 합의 최대값
func hourglassSum(arr: [[Int]]) -> Int {
    var sumArr:[[Int]] = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
        
    for i in 0...3 {
        for j in 0...3 {
            sumArr[i][j] = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2]
        }
    }
    
    let maxArr = sumArr.compactMap {
        $0.max()
    }
    
    return maxArr.max() ?? 0
}

/*
 -9 -9 -9  1 1 1
  0 -9  0  4 3 2
 -9 -9 -9  1 2 3
  0  0  8  6 6 0
  0  0  0 -2 0 0
  0  0  1  2 4 0
 */
hourglassSum(arr: [[-9,-9,-9,1,1,1], [0,-9,0,4,3,2], [-9,-9,-9,1,2,3], [0,0,8,6,6,0], [0,0,0,-2,0,0], [0,0,1,2,4,0]])
